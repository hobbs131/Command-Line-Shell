#!/bin/bash
#
# A script to automate testing programs on the command line.
# author:  Chris Kauffman <kauffman@umn.edu>
# RELEASE: Mon 17 Feb 2020 09:42:58 PM CST 

read -r -d '' usage <<EOF
usage:    testy <testfile.org> [test# test# ...]
          testy --help

examples: testy test_prob1.org        # runs all tests in file
          testy test_prob1.org 3 5 7  # runs tests 3,5,7 in file
          testy test_prob1.org 5      # runs only test 5 and shows failures to stdout
          SHOW=1 test_prob1.org       # runs tests and prints all failures to stdout

Run tests for a shell program specified in an org-like file and report
the results.

--- INPUT FORMAT ---

Tests are specified in org-like files. Each top-level section starts
with a * with a test title, followed by comments and test sessions of
input/output. Each test can have multiple sessions. As a session is
found it is run. If the session fails, subsequent sessions for that
test are not run.

Sample input:
================
#+TITLE: Sample Tests

* Test echo
Check that the 'echo' command in bash is working.

The 'sh' is not honored in testy; it is for easy editing in Emacs.

#+BEGIN_SRC sh
>> echo 'hello'
hello
>> echo 'Hi there!'
Hi there!
#+END_SRC

* Test printf
Tests whether printf works.

#+BEGIN_SRC sh
>> printf "Hello world\n"
Hello world
>> printf "Multi-line\noutput is expected\nhere\n"
Multi-line
output is expected
here
>> printf "%s\n" "substitute me"
substitute me
#+END_SRC

This second session below will fail and record the results of the
failure in a file.
#+BEGIN_SRC sh
>> echo 'hi'
hi
>> printf 'INTENTIONAL fail\n'
INTENTIONALly fails
#+END_SRC

* Test bc
This test uses a different interpreter than the standard 'bash'. The
'bc' program interprets standard mathematical expressions. Note the
use of #+TESTY expression to change the program for this test.

#+TESTY: program="bc -iq"
#+BEGIN_SRC sh
>> 1+1
2
>> 3*5+12
27
#+END_SRC
================

--- BEHAVIOR / ENVIRONMENT VARIABLES ---
The following variables can be specified in test files via lines like
  #+TESTY: var="value"
or on via an environment variable during a program run as in
  > VAR="value" testy testfile.org

They will change the behavior of how the test data is interpretted.

Global variables that are usually specified at the beginning of a test
file before any other tests.

PROGRAM="bash"           : program to run/test if no option is specified
PROMPT=">>               : prompt to honor if none is specified
ECHOING="input"          : {input, both} for program input echoing style, 
                           "input" means the program echoes only input provided by testy, testy will add back in prompts
                           "both" echoes both prompt and input so testy won't add back anything
PREFIX="test"            : prefix for output files
RESULTDIR="test-results" : directory where the resutls will be written
TIMEOUT="5s"             : maximum time for the test before it is failed due to timeout
POST_FILTER=""           : program to adjust output from test before evaluating, run as 'cat output | post_filter > actual.tmp'
USE_VALGRIND="0"         : set to 1 to run programs under Valgrind which checks for memory errors
VALGRIND_REACHABLE="1"   : under valgrind, report errors if memory is still reachable at the end of the program

Each of the above Global variables can be set Locally during a single
test by setting their lower-case version. For exaxmple:

  * Test 5: A test of bc
  #+TESTY: program="bc -i" 

will send input to the program "bc -i" and check output rather than
the default PROGRAM. The lower case options are reset during each test
run but NOT in between sessions in single test.

Finally, these variables control some global behavior of the testy.
SHOW=0            : set to 1 to print test error results after completing
DEBUG=0           : set to 1 to print LOTS of debugging messages
EOF

# some global options/programs
STDBUF="stdbuf -i 0 -o 0 -e 0"                        # disables standard IO buffering for a program
SDIFF="diff -ytbB"                                    # side by side diff, no tabs, ignore space changes, ignore blank lines
DIFF="diff -bB \
           --unchanged-line-format='' \
           --old-line-format='EXPECT:%4dn) %L' \
           --new-line-format='ACTUAL:%4dn) %L'"       # diff which will show prepend EXPECT/ACTUAL to differing lines
TIMEOUTCMD="timeout --signal KILL"                    # kills user programs after a certain duration  of 'timeout'  
VALG_ERROR="13"                                       # error code that valgrind should return on detecting errors

VALGRIND_PROG="valgrind --leak-check=full --show-leak-kinds=all --error-exitcode=13 --track-origins=yes"

# default values for the program to be tested
PROGRAM=${PROGRAM:-"bash -v"}                         # program to run if no option is specified
PROMPT=${PROMPT:-">>"}                                # prompt to honor if none is specified
ECHOING=${ECHOING:-"input"}                           # {input, both} for program input echoing style
PREFIX=${PREFIX:-"test"}                              # prefix for the files that are produced by testy
RESULTDIR=${RESULTDIR:-"test-results"}                # directory where the resutls will be written
RESULTRAW=${RESULTRAW:-"$RESULTDIR/raw"}              # directory where actual / expect / valgrind results are stored
TIMEOUT=${TIMEOUT:-"5s"}                              # time after which to kill a test, passed to 'timeout' command
POST_FILTER=${POST_FILTER:-""}                        # run this progam on output to adjust it if needed
USE_VALGRIND=${USE_VALGRIND:-"0"}                     # use valgrind while testing
VALGRIND_REACHABLE=${VALGRIND_REACHABLE:-"1"}         # report valgrind errors if memory is still reachable

PASS_STATUS="ok"                                      # status message associated with passing
TEST_TITLE_WIDTH=20                                   # initial width for test test_titles, set to widest during initial parsing

function reset_options(){                             # reset options to defaults, run before each test session
    program=$PROGRAM
    prompt=$PROMPT
    echoing=$ECHOING
    prefix=$PREFIX
    resultdir=$RESULTDIR
    resultraw=$RESULTRAW
    timeout=$TIMEOUT
    post_filter=$POST_FILTER
    use_valgrind=$USE_VALGRIND
    valgrind_reachable=$VALGRIND_REACHABLE
}    

function debug(){                                     # print a debug message
    if [[ ! -z "$DEBUG" ]]; then
        echo "==DBG== $1" > /dev/stderr
    fi
}

function updateline(){                                # processes $line to set some other global variables
    line="$REPLY"                                     # copy from REPLY to avoid losing whitespace
    ((linenum++))                                     # update the current line number 
    first="${line%% *}"                               # extracts the first word on the line 
    rest="${line#* }"                                 # extracts remainder of line
}    

################################################################################
# Run a Test Session
#
# Sets up a test session which is denoted by the #+BEGIN_SRC/#+END_SRC
# tags in the input file. Will set the 'status' variable before
# exiting to indicate whether the test passes or fails. Influenced by
# many of the run variables including
# - program
# - tag
# - prompt
# 
# The function is run in a context where 'read' will extract lines
# from the test session.
function run_test_session(){

    mkdir -p $resultdir                               # set up test results directory
    mkdir -p $resultraw
    result_file=$(printf "%s/%s-%02d-result.tmp" "$resultdir" "$prefix" "$testnum")
    actual_file=$(printf "%s/%s-%02d-actual.tmp" "$resultraw" "$prefix" "$testnum")
    expect_file=$(printf "%s/%s-%02d-expect.tmp" "$resultraw" "$prefix" "$testnum")
    valgrd_file=$(printf "%s/%s-%02d-valgrd.tmp" "$resultraw" "$prefix" "$testnum")
    rm -f ${actual_file} ${expect_file} ${result_file} ${valgrd_file}

    if [[ "$use_valgrind" = 1 ]]; then
        VALGRIND="${VALGRIND_PROG} --log-file=${valgrd_file}"
    else
        VALGRIND=""
    fi

    toprog_fifo=$(mktemp --tmpdir testy_to.XXXXXX)    # set up communication with the program being tested
    fromprog_file=$(mktemp --tmpdir testy_from.XXXXXX)
    debug "toprog_fifo: $toprog_fifo"
    debug "fromprog_fifo: $fromprog_fifo"
    rm -f ${toprog_fifo} ${fromprog_file}             # remove just in case

    mkfifo $toprog_fifo                               # create the fifos
    # mkfifo $fromprog_fifo

    # RUN THE PROGRAM
    #
    # - timeout will kill the program after a certain duration
    # - stdbuf disables buffering and prevents stalled output problems
    # - valgrind may be turned on to check for memory errors
    # - input is read from a fifo from the specfile
    # - output is directed to a file
    debug "running: '$TIMEOUTCMD $timeout $STDBUF $VALGRIND $program <${toprog_fifo} &> ${fromprog_file} &'"
    $TIMEOUTCMD $timeout $STDBUF $VALGRIND $program <${toprog_fifo} &> ${fromprog_file} &
    pid=$!
    debug "child pid: $pid"

    # open to after running the program or testy will stall 
    exec {to}>${toprog_fifo}                          # open connection to fifo for writing
    debug "to fd: $to"

    status="$PASS_STATUS"                             # initial status, change to 'FAIL' if things go wrong
    fail_messages=()                                  # array accumulating failure messages
    all_input=()                                      # array accumulating input fed to program
    session_beg_line=$((linenum+1))
    eof_set=0

    # LOOP to feed lines of input to the program, output is fed to a
    # file, modified later if needed to re-add the prompt
    while read -r; do                                 # read a line from the test session
        updateline
        debug "$linenum: $line"
        case "$first" in
            "#+END_SRC")                              # end of test, break out
                debug "^^ end of testing session"
                break
                ;;
            "#+TESTY_EOF:")                           # end of input, remaining session is output
                eof_set=1
                debug "^^ eof_set=1"
                ;;
            "$prompt")                                # test input, feed to program
                if [[ "$eof_set" = "0" ]]; then
                    input="$rest"
                    all_input+=("$input")                 # append to all_input array for later processing
                    debug "^^ sending input"
                    printf "%s\n" "$input" >&$to          # send input after prompt to program, printf in this way preserves embedded newlines
                else
                    debug "^^ ignoring prompt after EOF"
                fi
                ;;
            *)                                        # other lines are test output
                debug "^^ expected output"
                ;;
        esac                                          # DONE with test input, either pass or fail
    done;

    session_end_line=$((linenum-1))                   # note the line session ends on to enable #+TESTY_RERUN:
    debug "session lines: beg $session_beg_line end $session_end_line"

    debug "closing to fifo fd ${to}"
    exec {to}>&-                                      # closes to fifo

    debug "waiting on finished child"                 
    wait $pid &> /dev/null                            # wait on the child to finish
    retcode="$?"                                      # capture return code from program run
    debug "wait returned: $retcode"                   

    debug "removing to fifo"
    rm ${toprog_fifo}                                 # ${toprog_fifo}

    case "$retcode" in                                # inspect return code for errors
        "$VALG_ERROR")
            status="FAIL"
            fail_messages+=("FAILURE($retcode): Valgrind detected errors")
            ;;
        137)
            status="FAIL"
            fail_messages+=("FAILURE($retcode) due to TIMEOUT: Runtime exceeded maximum of '$timeout'")
            ;;
        139)
            status="FAIL"
            fail_messages+=("FAILURE($retcode) due to Kill Signal from OS: likely a SEGFAULT occured")
            ;;
    esac        

    if [[ "$use_valgrind" = "1" ]] &&                 # if valgrind is on
       [[ "$valgrind_reachable" = "1" ]] &&           # and checking for reachable memory
       ! awk '/still reachable:/{if($4 != 0){exit 1;}}' ${valgrd_file};
    then                                              # valgrind log does not contain 'reachable: 0 bytes'
        status="FAIL"                               
        fail_messages+=("FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()")
    fi

    cp ${fromprog_file} ~/fromprog.tmp

    # ADDING IN PROMPTS TO ECHOED INPUT
    # 
    # NOTE: The code below handles adding prompts to input lines that
    # are echoed without it.  Originally was trying to do this with
    # sed or awk but the quoting becomes a huge mess: any input lines
    # with special characters like $ or " need to be escaped leading
    # to huge headaches.  The shell string equality = operator is
    # actually cleaner here.  The below uses the shell
    # directly. Output is redirected to an open FD to prevent needing
    # constantly re-open the file for appending (could alternatively
    # do this with { } construct).  This approach can be fooled: if an
    # output line matches an input line, the prompt may be added at
    # the wrong spot.
    if [[ "$ECHOING" = "input" ]]; then               # program may only echo input necessitating adding prompts to output
        idx=0                                         # index for input line
        exec {mod}>${fromprog_file}.mod
        while read -r || [[ "$REPLY" != "" ]]; do     # read from output file into default REPLY var, second condition catches last line which may not end with a newline char
            if (( idx < ${#all_input[@]} )) &&        # still in bounds for input lines
               [[ "${all_input[idx]}" = "$REPLY" ]];  # input line matches the program output
            then
                REPLY="$prompt $REPLY";               # add the prompt to this line
                ((idx++))                             # move to the next input to look for
                debug "added prompt to input $idx: $REPLY"
            fi;
            printf '%s\n' "$REPLY" >&$mod             # output the (un)modified line into the modified file
        done < ${fromprog_file}                       # reading from the original output file
        exec {mod}>&-                                 # close the modified file
        mv ${fromprog_file}.mod ${fromprog_file}      # copy modified file back to original
    fi

    if [[ "$post_filter" != "" ]]; then               # use a filter to post-process the output
        debug "running post filter '$post_filter'"
        cat ${fromprog_file} | ${post_filter} > ${fromprog_file}.tmp
        mv ${fromprog_file}.tmp ${fromprog_file}
    fi

    # To avoid confusion, replace message from timeout program with
    # easier to interpret Segfault Message
    sed -i'' 's/timeout: the monitored command dumped core/Segmentation Fault/' ${fromprog_file}

    mv ${fromprog_file} ${actual_file}                # copy temp file to final destination

    # extract expected output from test file, filter #+TESTY_ , store result in expect_file
    cat $specfile | \
        sed -n "${session_beg_line},${session_end_line}p" | \
        grep -v '^#+TESTY_' \
        > ${expect_file}

    # Try to compute the width of expected/actual outputs to make the
    # side-by-side diff as narrow as possible. 'diff -y -W' is a bit
    # funky as it tries to split the side-by-side comparison into evey
    # column widths. The below computation finds the maximum width of
    # the two compared files and doubles it adding 3 for the middle
    # diff characters. This may result in an grossly wide display if
    # the left EXPECT column is narrow while the right ACTUAL column
    # wide. Later code filters to remove extraneous whitespace from
    # the left column.
    actual_width=$(awk 'BEGIN{max=16}{w=length; max=w>max?w:max}END{print max}' $actual_file)
    expect_width=$(awk 'BEGIN{max=16}{w=length; max=w>max?w:max}END{print max}' $expect_file)
    col_width=$((actual_width > expect_width ? actual_width : expect_width))
    total_width=$((col_width*2 + 3))                  # width to pass to diff as -W
    debug "actual_width $actual_width"
    debug "expect_width $expect_width"
    debug "col_width $col_width"
    debug "total_width $total_width"
    
    diffcmd="$DIFF ${expect_file} ${actual_file}"     # run standard diff to check for differences
    diffresult=$(eval "$diffcmd")                     
    diffreturn="$?"                                   # capture return value for later tests
    debug "diffresult: $diffresult"
    debug "diffreturn: $diffreturn"
    if [[ "$diffreturn" != "0" ]]; then
        status="FAIL"
        fail_messages+=("FAILURE: Output Mismatch at lines marked")
    fi

    if [[ "$status" = "$PASS_STATUS" ]]; then         # test passed
        debug "NORMAL cleanup"                        # normal finish
        debug "Checking child status with kill -0"
        kill -0 $pid  >& /dev/null                    # check that the child is dead, return value 1
        debug "kill returned: $?"
    else
        debug "FAILURE cleanup"                       # test failed for some reason
        {                                             # begin capturnig output for results file
           printf '(TEST %d) %s\n' "$testnum" "$test_title"
           printf 'COMMENTS:\n'
           printf "${comments}\n" 
           printf 'program: %s\n' "$program"
           printf "Failure messages:\n"
           for msg in "${fail_messages[@]}"; do       # iterate through faiure messages
               printf "%s\n" "- $msg"
           done
           printf "\n"

           if [[ "$diffreturn" != "0" ]]; then        # show differences between expect and actual
               printf "%s\n" "--- Side by Side Differences ---"
               printf "%s\n" "- Expect output in: $expect_file" 
               printf "%s\n" "- Acutal output in: $actual_file" 
               printf "%s\n" "- Differing lines have a character like '|' in the middle\n"
               printf "%-${col_width}s   %-${col_width}s\n" "==== EXPECT ====" "==== ACTUAL ===="
               $SDIFF -W $total_width $expect_file $actual_file 
               printf "%s\n" "--- Line Differences ---"
               printf "%s\n" "$diffresult"
               printf "\n"
           fi

           if [[ "$use_valgrind" = "1" ]]; then       # show valgrind log if enabled and test failed
               printf "%s\n" "--- Valgrind Log from: $valgrd_file ---"
               cat $valgrd_file
               printf "\n"
           fi
        } &> ${result_file}                           # end of results file output

        # The below eliminate extra spaces in diff results mostly for
        # the left EXPECT column that would make the output very wide.
        # This is a bit risky as it may eliminate some real expected
        # output so take care if the output is very wide. This is
        # mitigated by NOT changing anything in the first
        # $actual_width columns of the output file.
        if ((actual_width - expect_width > 10)); then
            extra_space_width=$((actual_width-expect_width))
            extra_space_width=$((extra_space_width-5))
            debug "Eliminating $extra_space_width spaces from result file"
            sed -i -E "s/(.{$expect_width})[ ]{$extra_space_width}/\1 /" $result_file
        fi

        fail_files+=("${result_file}")                # test failed, add to files to show later
        status="FAIL -> results in file '$result_file'"
    fi

    comments=""                                     # clear comments for next session
    return 0;
}


################################################################################
# BEGIN main processing

unset BASH_ENV                                        # ensure subshells don't spit out extra gunk

funcs=$(declare -x -F | awk '{print $3}')             # eliminate any exported functions in bash
for f in $funcs; do                                   # as these are output with the -v option
    unset -f $f;
done


if [[ "$#" < 1 ]]; then                               # check for presence of at least 1 argument
    printf "usage: testy <testspec> [testnum]\n"
    printf "       testy --help\n"
    exit 1
fi

# Command line argument processing
specfile=$1                                           # gather test file
shift                                                 # shift test file off the command line
alltests="$@"                                         # remaining args are tests to run
debug "Testing $specfile"
debug "alltests='$alltests"                           



if [[ "$specfile" = "--help" ]]; then                 # check for --help option
    printf "$usage\n"                                 # print usage and exit
    exit 0
fi

# check for necessary tools
deps="valgrind timeout stdbuf awk sed grep diff"
for dep in $deps; do
    if ! which $dep >& /dev/null ; then
        echo "ERROR: testy requires the program '$dep' which does not appear to be installed"
        echo "Consult your OS docs and install '$dep' before proceeding"
        echo "If '$dep' is installed, adjust your PATH variable so '$dep' can be found using 'which $dep'"
        which $dep
        exit 1
    fi
done

##################################################
# first procesing loop: read whole file into testdata array which will
# contain the text of each test. Record ONLY the start/end lines of
# each test to be used later.  Other side effects: evaluate any global
# #+TESTY: expressions, calculate the widest test title width for nice
# display later.
eval_testy_expr=1                                     # set to 0 after getting into the first test
test_beg_line=(-1)
test_end_line=(-1)
testnum=0                                             # current test number
linenum=0
while read -r; do                                     # read from test file, -r to prevent \-escaped chars
    updateline
    debug "$linenum: $line\n"
    case "$first" in
        "*")
            debug "^^ Test Start"
            eval_test_expr=0                          # in a test, wait to evaluate #+TESTY: expr until during test
            if (( testnum > 0 )); then                # if not the first test
                endline=$(( linenum-1 ))
                test_end_line+=("$endline")
                beg=${test_beg_line[testnum]}
                end=${test_end_line[testnum]}
                debug "Test $testnum beg $beg end $end"
            fi
            ((testnum++))                             # reset and start collecting text for the new test
            test_beg_line+=("$linenum")
            if (( ${#rest} > $TEST_TITLE_WIDTH ));    # calculate maximum width of any title
            then
                TEST_TITLE_WIDTH=${#rest}
            fi
            ;;
        "#+TESTY:")                                   # evaluate global expressions
            if [[ "$eval_testy_expr" = "1" ]]; then
                debug "Evaluating '$rest'"
                eval "$rest"
            fi
            testtext="$testtext\n$line"               # append line to current test text as it may be a local test option
            ;;
        "#+TITLE:"|"#+title:")
            global_title="$rest"
            debug "^^ setting global_title"
            ;;
        *)
            debug "^^ Ignoring line in first pass"
            ;;
    esac
done < $specfile

endline=$(( linenum ))                                # append the last test end
test_end_line+=("$endline")
beg=${test_beg_line[testnum]}
end=${test_end_line[testnum]}
debug "Test $testnum beg $beg end $end"

totaltests=$testnum                                   # set the total number of tests read from the file

# Debug output
for i in $(seq $testnum); do
    debug "-----TEST $i: beg ${test_beg_line[i]} end: ${test_end_line[i]} -----"
    while read -r; do                                # iterate over all lines of test
        debug ":TEST $i: $REPLY"
    done <<< "$(sed -n "${test_beg_line[i]},${test_end_line[i]}p" $specfile)"
done

##################################################
# Second loop: run tests


if [[ -z "$alltests" ]]; then                         # no individual tests specified on the command line
    alltests=$(seq $totaltests)                       # so run all tests
fi
ntests=$(wc -w <<< "$alltests")                       # count how many tests will be run

if [[ "$ntests" == "1" && "$SHOW" == "" ]]; then
    debug "Running single test, setting SHOW=1 to display single test results"
    SHOW=1
fi

testcount=0
failcount=0

# Print header info 


printf "============================================================\n"
if [[ "$global_title" = "" ]]; then
    printf "== testy $specfile\n"
else
    printf "== $specfile : %s\n" "$global_title"
fi    
printf "== Running %d / %d tests\n" "$ntests" "$totaltests"

for testnum in $alltests; do                          # Iterate over all tests to be run
    ((testcount++))                                   # increment # of tests attempted
    reset_options
    comments=""                                       # initialize comments
    linenum=$((test_beg_line[testnum]-1))
    debug ":TEST $testnum: START at line $linenum"

    while read -r; do                                 # iterate over all lines of test
        updateline
        debug "$linenum: $line"

        case "$first" in
            "*")                                      # usually first line with title of the test
                test_title="$rest"
                debug "test_title: $test_title"
                ;;
            "#+TESTY:")                               # eval some code to set options
                debug "evaluating '$rest'"
                eval "$rest"
                ;;
            "#+BEGIN_SRC")                            # test session starting
                debug ":TEST $testnum: Begin testing session"
                run_test_session
                if [[ "$status" != "$PASS_STATUS" ]]; then
                    ((failcount++))                   # test failed, bail out of this test
                    break
                fi
                ;;
            "#+TESTY_RERUN:")                         # eval some code to set options
                old_linenum=$linenum
                beg=$((session_beg_line))             # #+BEGIN_SRC line
                end=$((session_end_line+1))           # #+END_SRC line
                linenum=$((beg-1))
                debug "^^ Re-running session on lines $beg to $end"
                run_test_session <<< "$(sed -n "${beg},${end}p" $specfile)"
                debug "Done re-running session on lines $beg to $end"
                linenum=$old_linenum
                ;;
            *)                                        # any other lines are comments associated with a session
                if [[ "$comments" != "" ]] || [[ "$line" != "" ]]; then
                    debug "^^ comment"                # ignore leading blank lines in comments
                    comments="${comments}${line}\n"
                fi
                ;;
        esac
    done <<< "$(sed -n "${test_beg_line[testnum]},${test_end_line[testnum]}p" $specfile)"

    # report the final status of this test
    printf "%-3s %-${TEST_TITLE_WIDTH}s : %s\n" "${testnum})" "$test_title" "$status"
done    

########################################
# Final Output
passcount=$((testcount-failcount))                    # calculate number of tests passed
printf "============================================================\n"
printf "RESULTS: $passcount / $testcount tests passed\n"

debug "SHOW: $SHOW"
if [[ "$SHOW" == "1" && "${#fail_files[@]}" > "0" ]]; then # show failure results if requested
    printf "\n\n"
    printf "FAILURE RESULTS\n"
    printf "%s\n" "----------------------------------------"
    for f in "${fail_files[@]}"; do                   # iteratre overa ll failure files outputing them
        cat $f
        printf "%s\n" "----------------------------------------"
    done
fi
